apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etl-gardener-server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      # Used to match pre-existing pods that may be affected during updates.
      run: etl-gardener-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  # Pod template.
  template:
    metadata:
      #labels:
        # Note: run=etl-gardener-server should match a service config with a
        # public IP and port so that it is publicly accessible.
        # run: etl-gardener-server
      annotations:
        # Tell prometheus service discovery to collect metrics from the containers.
        prometheus.io/scrape: 'true'
    spec:
      # When container receives SIGTERM, it begins a new checkpoint. This can
      # take longer than the default grace period of 30s.
      terminationGracePeriodSeconds: 300

      # Place the pod into the Guaranteed QoS by setting equal resource
      # requests and limits for *all* containers in the pod.
      # For more background, see:
      # https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-qos.md
      containers:
      - image: gcr.io/{{GCLOUD_PROJECT}}/github-m-lab-etl-gardener:{{GIT_COMMIT}}
        name: etl-gardener
        args: []
        env:
          - name: GARDENER_SERVICE
            value: "true"
          - name:  GIT_COMMIT
            value: "{{GIT_COMMIT}}"
        ports:
          - containerPort: 9090
        resources:
          requests:
            memory: "3GB"
            cpu: "1"
          limits:
            memory: "3GB"
            cpu: "1"
        volumeMounts:
        - mountPath: /etl-gardener
          name: etl-gardener-storage


      # Disks created manually, can be named here explicitly using
      # gcePersistentDisk instead of the persistentVolumeClaim.
      volumes:
      - name: etl-gardener-storage
        persistentVolumeClaim:
          claimName: auto-etl-gardener-disk0